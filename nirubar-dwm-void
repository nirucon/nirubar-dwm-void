#!/bin/sh

# Status bar for Void Linux with dwm using xsetroot by Nicklas Rudolfsson
# https://github.com/nirucon

# Check if Font Awesome is installed
check_font_awesome() {
    fc-list | grep -q -i "Font Awesome"
}

IDENTIFIER=$(check_font_awesome && echo "fontawesome" || echo "text")

# Define separator characters
SEP1=" [ "
SEP2=" ] "

# Check if the device is a laptop
IS_LAPTOP=$(ls /sys/class/power_supply | grep -q 'BAT' && echo true || echo false)

# Module to display date and time
module_date() {
    date "+%Y-%m-%d %H:%M"
}

# Module to display battery status
module_battery() {
    for battery in /sys/class/power_supply/BAT*; do
        [ -d "$battery" ] || continue
        CHARGE=$(cat "$battery/capacity")
        STATUS=$(cat "$battery/status")
        ICON=$(case $CHARGE in
                   [8-9][0-9]|100) echo "";;
                   [6-7][0-9]) echo "";;
                   [4-5][0-9]) echo "";;
                   [2-3][0-9]) echo "";;
                   *) echo "";;
               esac)
        [ "$STATUS" = "Charging" ] && ICON="$ICON "
        printf "%s %s%% " "$ICON" "$CHARGE"
    done
}

# Module to display system resources (RAM and Disk usage)
module_resources() {
    RAM=$(free -h | awk '/^Mem:/ {print $3 "/" $2}')
    DISK=$(df -h / | awk 'END{print $3 "/" $2}')
    printf " %s  %s" "$RAM" "$DISK"
}

# Module to display volume level (supports alsa, pulse, and pipewire)
module_volume() {
    if command -v pamixer >/dev/null 2>&1; then
        VOL=$(pamixer --get-volume)
        MUTE=$(pamixer --get-mute)
    else
        STATUS=$(amixer sget Master | awk -F '[][]' 'END{ print $4 }')
        VOL=$(amixer get Master | awk -F '[][]' 'END{ print $2 }' | sed 's/%//')
        MUTE=$([ "$STATUS" = "off" ] && echo true || echo false)
    fi
    ICON=$(case $MUTE in
               true) echo "";;
               false) case $VOL in
                          [0-9]|[1-3][0-9]) echo " $VOL%";;
                          [4-6][0-9]) echo " $VOL%";;
                          *) echo " $VOL%";;
                      esac;;
           esac)
    echo "$ICON"
}

# Module to display WiFi status using NetworkManager
module_wifi() {
    CONNAME=$(nmcli -t -f active,ssid dev wifi | grep '^yes' | cut -d: -f2)
    [ -z "$CONNAME" ] && CONNAME=$(nmcli -t -f active,device,type,connection dev status | grep '^yes:wired' | cut -d: -f4)
    PUBLIC_IP=$(curl -s https://ipinfo.io/ip)
    printf " %s %s" "$CONNAME" "$PUBLIC_IP"
}

# Module to display cmus status
module_cmus() {
    CMUSDATA=$(cmus-remote -Q 2>/dev/null)
    if [ -z "$CMUSDATA" ]; then
        echo ""
        return
    fi
    STATUS=$(echo "$CMUSDATA" | grep -w 'status' | awk '{print $2}')
    ICON=$(case $STATUS in
               playing) echo "";;
               *) echo "";;
           esac)
    ARTIST=$(echo "$CMUSDATA" | grep -w 'tag artist' | sed 's/tag artist //')
    TRACK=$(echo "$CMUSDATA" | grep -w 'tag title' | sed 's/tag title //')
    printf "%s %s - %s" "$ICON" "$ARTIST" "$TRACK"
}

# Module to display Spotify status
module_spotify() {
    ARTIST=$(playerctl metadata artist 2>/dev/null)
    TRACK=$(playerctl metadata title 2>/dev/null)
    STATUS=$(playerctl status 2>/dev/null)
    if [ -z "$ARTIST" ] || [ -z "$TRACK" ]; then
        echo ""
        return
    fi
    ICON=$(case $STATUS in
               Playing) echo "";;
               *) echo "";;
           esac)
    printf "%s %s - %s" "$ICON" "$ARTIST" "$TRACK"
}

# Main loop
while true; do
    STATUS_OUTPUT=""
    STATUS_OUTPUT+="| $(module_volume)"
    $IS_LAPTOP && STATUS_OUTPUT+=" | $(module_battery)"
    ps -C cmus > /dev/null && STATUS_OUTPUT+=" | $(module_cmus)"
    ps -C spotify > /dev/null && STATUS_OUTPUT+=" | $(module_spotify)"
    STATUS_OUTPUT+=" | $(module_resources)"
    STATUS_OUTPUT+=" | $(module_date)"

    xsetroot -name "$STATUS_OUTPUT"
    sleep 1
done

